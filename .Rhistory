install.packages("KernSmooth")
library(KernSmooth)
search()
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2,3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye()
q()
add2 <- function(x, y){
x+y
}
add2(2, 3)
above <- function(x, n){
use <- x > n
x[use]
}
x<- 1:20
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na, rm = removeNA)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
search()
library(swirl)
ls()
rm(list=ls())
swril()
swirl()
getwd()
ls()
x<-9
ls()
list.files(0)
list.files()
dor)_
dir()
?list.files
arcs(list.files)
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
testdir <- dir.create()
testdir <- dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
args("file.rename")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
setwd()
setwd("old.dir")
?setwd
setwd(dir = "old.dir")
getwd()
setwd(old.dir)
unlink("test.dir", recursive=T)
unlink("testdir", recursive=T)
unlink("testdir", recursive=TRUE)
q()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by = 0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
set_along(my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10. 6)
num_vect <- c(0.5, 55, -10, 6)
tf<- num_vect<1
tf
num_vect>-6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "starrytc")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
bye()
q()
q()
x<- list(a=1:5, b=rnorm(10))
x
?list
lapply(x, mean)
c<- rnomr(20, 1)
c<- rnorm(20, 1)
c
mean(c)
d <- rnorm(20, 5)
mean(d)
?runif
str(mapply)
str(runif)
>gl
?gl
gl(3, 10)
length(gl)
length(gl(3, 10))
q(0)
(0)
q()
library(XML)
q()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
library("RMySQl")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1"5"]
allTables[1:5]
dblistFields(hg19, "affyU133Plus2")
dbListFields(hg19, "affyU133Plus2")
library("RMySQl")
library("RMySQL")
dbListFields(hg19, "affyU133Plus2")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19, "affyU133Plus2")
dbgetQuery(hg19, "select count(*) from affyU133Plus)
2
""
"
dbgetQuery(hg19, "select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n = 10); dbClearResult(query)
dim(affyMisSmall)
dim(affyMis)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A=matrix(1:10, nr=5,nc=2)
h5write(A,'example.h5', "foo/A")
B = arry(seq(0.1, 2.0, by=0.1), dim =c(5, 2, 2))
B = array(seq(0.1, 2.0, by=0.1), dim =c(5, 2, 2))
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.fram(1L:5L, seq(0, 1,length.out=5),c("ab","cde","fghi","a","s"),stringAsFactors=FALSE)
df = data.frame(1L:5L, seq(0, 1,length.out=5),c("ab","cde","fghi","a","s"),stringAsFactors=FALSE)
df
readA =h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5", "foo/A")
h5read("example.h5", "foo/A", index=list(1:3,1))
con=url("http://scholar.google.com/citations?user=HI-I60AAAAl&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
con=url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode=readLines(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, userInternalNodes=T)
html <- htmlTreeParse(url, userInternalNodes=TRUE)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
list()
list
library(httr);html2=GET(url)
content2=content(html2,as="text")
parsedHtml=htmlParse(content2,asText=T)
xpathSApply(parsedHtml,"//title",xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg1
names(pg1)
google=handle("http://google/com")
google=handle("http://google.com")
pg1=GET(handle=google,path="/")
pg2=GET(handle=google,path="search")
pg1
pg2
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
url <- "http://biostat.jhsph.edu/~jleek/contact.html "
html <- htmlTreeParse(url, useInternalNodes=TRUE)
q()
library(swirl)
swril()
swirl()
install.packages(kernlab)
help(install.packages)
install.packages("kernlab)
""
q
q()
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3455)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
trable(trainIndicator)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve +1 ) ~ trainSpam$type)
install.packages("rmarkdown")
setwd("~/class/coursework/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", filename))
fileName <- as.character(unzip("activity.zip", list=T)$Name)
print(fileName)
help("read.csv")
data <- read.csv("activity.zip")
data <- read.csv("activity.csv", colClasses = c("numeric", "Date", "numeric"))
name(data)
steps_per_day <- aggregate(steps ~ date, data, sum, na.action = na.pass))
steps_per_day <- aggregate(steps ~ date, data, sum, na.action = na.pass)
str(steps_per_day)
help(histogram)
help(hist)
steps_per_day <- aggregate(steps ~ date, data, sum, na.action = na.pass)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
rmean <- mean(steps_per_day$steps)
rmedian <- median(steps_per_day$steps)
library(ggplot2)
steps_per_day <- aggregate(steps ~ date, data, sum, na.action = na.pass)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
rmean <- mean(steps_per_day$steps)
rmedian <- median(steps_per_day$steps)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "black", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
steps_mean <- mean(steps_per_day$steps, na.rm = TRUE)
steps_median <- median(steps_per_day$steps, na.rm = TRUE)
steps_per_interval <- aggregate(data$steps, by = list(interval = data$interval),
FUN=mean, na.rm=TRUE)
colnames(steps_per_interval) <- c("interval", "steps")
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red") +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
max_interval <- steps_per_interval[which.max(steps_per_interval$steps),]
str(max_interval
)
help("print")
print(max_interval)
missing_vals <- sum(is.na(rdata$steps))
missing_vals <- sum(is.na(data$steps))
imputed_data <- adply(data, 1, function(x) if (is.na(x$steps)) {
x$steps = round(steps_per_interval[steps_per_interval$interval == x$interval, 2])
x
} else {
x
})
library(plyr)
imputed_data <- adply(data, 1, function(x) if (is.na(x$steps)) {
x$steps = round(steps_per_interval[steps_per_interval$interval == x$interval, 2])
x
} else {
x
})
missing_vals <- sum(is.na(imputed_data$steps))
str(missing_vals)
new_steps_per_day <- aggregate(steps ~ date, imputed_data, sum)
ggplot(new_steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(x = "Number of Steps per Day (with filled-in values)", y = "Frequency") + theme_bw()
new_steps_mean <- mean(new_steps_per_day$steps)
new_steps_median <- median(new_steps_per_day$steps)
str(new_steps_per_day)
data.weekend <- subset(imputed_data, weekdays(date) %in% c("Saturday", "Sunday"))
data.weekday <- subset(imputed_data, !weekdays(date) %in% c("Saturday", "Sunday"))
# calculate the average steps per interval for these two subsets & combine them
data.weekend <- aggregate(steps ~ interval, data.weekend, mean)
data.weekday <- aggregate(steps ~ interval, data.weekday, mean)
data.weekend <- cbind(data.weekend, day = rep("weekend"))
data.weekday <- cbind(data.weekday, day = rep("weekday"))
data.week <- rbind(data.weekend, data.weekday)
levels(data.week$day) <- c("Weekend", "Weekday")
ggplot(data.week, aes(x = interval, y = steps)) +
geom_line(color = "red") +
facet_wrap(~ dayofweek, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
ggplot(data.week, aes(x = interval, y = steps)) +
geom_line(color = "red") +
facet_grid(day ~ .) +
labs(x="Interval", y="Number of steps") +
theme_bw()
data.week <- rbind(data.weekday, data.weekend)
levels(data.week$day) <- c("Weekday", "Weekend")
ggplot(data.week, aes(x = interval, y = steps)) +
geom_line(color = "red") +
facet_grid(day ~ .) +
labs(x="Interval", y="Number of steps") +
theme_bw()
data.weekend <- cbind(data.weekend, day = rep("weekends"))
data.weekday <- cbind(data.weekday, day = rep("weekdays"))
data.week <- rbind(data.weekday, data.weekend)
levels(data.week$day) <- c("Weekdays", "Weekends")
ggplot(data.week, aes(x = interval, y = steps)) +
geom_line(color = "red") +
facet_grid(day ~ .) +
labs(x="Interval", y="Number of steps") +
theme_bw()
From the plot above we can see that weekends activities seem to be more evenly distributed throughout the day, while weekdays activities are peaked early in the day, then quiet down for the rest of the day.
library(plotly)
install.packages("devtools")
library(plotly)
library(ggplot2)
p <- ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
print(p)
p <- qplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
print(p)
p <- ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(x = "Number of Steps per Day", y = "Frequency") + theme_bw()
p
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
